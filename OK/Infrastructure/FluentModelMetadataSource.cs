#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FluentMappingGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Telerik.OpenAccess.Metadata.Relational;
using OK.Models;

namespace OK
{

	public partial class FluentModelMetadataSource : FluentMetadataSource
	{
		
		protected override IList<MappingConfiguration> PrepareMapping()
		{
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();

            var entityMapping = new MappingConfiguration<EntityBase>();
            entityMapping.MapType().Inheritance(InheritanceStrategy.Horizontal);
            entityMapping.HasProperty(x => x.UpdateTime).IsCalculatedOn(DateTimeAutosetMode.InsertAndUpdate);
            mappingConfigurations.Add(entityMapping);

            var personMapping = new MappingConfiguration<Person>();
            personMapping.MapType().ToTable("person");
            personMapping.HasProperty(x => x.ID).IsIdentity();
            personMapping.HasAssociation(x=>x.Contents).WithOpposite(x=>x.Person).HasConstraint((p,c)=>p.ID==c.PersonId);
            mappingConfigurations.Add(personMapping);

            var contentMapping = new MappingConfiguration<Content>();
            contentMapping.MapType().ToTable("content");
            contentMapping.HasProperty(x => x.ID).IsIdentity();
            contentMapping.HasAssociation(x=>x.Person).WithOpposite(x=>x.Contents);
            mappingConfigurations.Add(contentMapping);
			return mappingConfigurations;
		}
		
		protected override void SetContainerSettings(MetadataContainer container)
		{
			container.Name = "FluentModel";
			container.DefaultNamespace = "OK";
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
			container.NameGenerator.RemoveCamelCase = false;
		}
	}
}
#pragma warning restore 1591
